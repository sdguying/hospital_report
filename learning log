###
如果出现NoReverseMatch   Reverse for 'edit_global_category' with no arguments not found. 1 pattern(s) tried:
['reports\\/edit\\/(?P<report_id>[0-9]+)\\/edit_global_category\\.html$']错误，下面的定位还是定位在base.html模板，找不到
位置，那么在模板中把导入base.html的语句注释掉，就能看到在哪里出现的问题。

###
{% if entries.0.category_id == summary.category_id %}
    <p>小结内容：{{ summary.content }} ；小结医生：{{ summary.doctor }}。 - <a href="#">修改</a></p>
{% endif %}
如果entries是一个数据列表，列表里的所有数据其中一个field都是一样的，比如category_id， 就可以使用模板中的索引方法来取得该值，
就不用for循环了。比如，list.index，示例如下
entries.0.category_id，可以这么用。

###
form.py里如果存在的字段，在模板中就要填入，要不然没法提交，如果在views里面给数据表中的字段预置了数据，则在form.py里
就不需要设置此字段了。

###
进一步学习templatetags，丰富模板逻辑功能

###
使用django2.0以上版本自带的会员注册登录系统：

1、建立新的APP：users，并在settings.py里面INSTALLED_APPS下注册，在最下面加入LOGIN_URL = '/users/login/'，如果用户没有登陆而直接
访问就会跳转到这个登陆界面，标明登录页面链接地址。

2、我们既然要在网页上有登录注册的功能，那么首先要在模板中加入相应的链接，首先在导航栏（模板是header.html）里加入登录、注册的链接，这其中
要判断user对象是否为空，不为空表示验证成功。代码如下：
    {% if user.is_authenticated %}
        你好，<a href="/admin/">{{ user.username }}</a> - <a href="{% url 'users:logout' %}">登出</a>
    {% else %}
        <a href="{% url 'users:register' %}">注册</a> - <a href="{% url 'users:login' %}">登录</a>
    {% endif %}

3、编辑urls设置路由
    （1）在项目总urls里面加入到users下的urls：path('users/', include(('users.urls', 'users'), namespace='users'))
    （2）在users APP的urls里面加入header.html模板中用到的路径，包括：login、register、logout，具体内容如下：

    from django.urls import path
    from django.contrib.auth.views import LoginView
    from .views import logout_view, register

    urlpatterns = [
        # 登录，django2.0之后需要导入LoginView类，使用as_view方法，传入模板参数
        path('login/', LoginView.as_view(template_name='users/login.html'), name='login'),

        # 注销和注册的函数需要自己在views里编写，函数名称不能使用logout，与内置方法冲突
        path('logout/', logout_view, name='logout'),
        path('register/', register, name='register'),
    ]

4、在users.views下编写相应函数，logout_view、register。
from django.shortcuts import render, HttpResponseRedirect, reverse
from django.contrib.auth import logout, login, authenticate  # 导入登出、登录、验证的方法
from django.contrib.auth.forms import UserCreationForm  # 自带的创建用户表单

def register(request):
    """注册"""
    if request.method != 'POST':
        form = UserCreationForm()
    else:
        form = UserCreationForm(request.POST)
        new_user = form.save()
        authenticate_user = authenticate(username = new_user.username, password = request.POST['password1'])
        login(request, authenticate_user) # 验证成功自动登录
        return HttpResponseRedirect(reverse('index:index'))

    context = {
        'form': form,
    }
    return render(request, 'users/register.html', context)


def logout_view(request):
    """登出"""
    logout(request)
    return HttpResponseRedirect(reverse('index:index'))

5、编辑模板，需要login.html、register.html两个模板文件
    login.html:
        <h1>登录</h1>
        <p>输入你的用户名和密码</p>
        {% if form.errors %}
            <p>您的用户名或密码不正确，请重新输入。</p>
        {% endif %}
        <form action="{% url 'users:login' %}" method="post">
            {% csrf_token %}
            <p>用户名{{ form.username }}</p>
            <p>密码{{ form.password }}</p>
            <button name="submit">登录</button>
            <input type="hidden" name="next" value="{% url 'index:index' %}" />
        </form>

    register.html:
        <form action="{% url 'users:register' %}" method="post">{% csrf_token %}
            {{ form.as_p }}
        <button name="submit">提交</button>
        <input type="hidden" name="next" value="{% url 'index:index' %}" />
        </form>

至此就实现了登录、注册、登出的功能，但是
